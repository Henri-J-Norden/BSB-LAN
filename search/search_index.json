{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Manual for BSB-LAN (English)","title":"Manual for BSB-LAN (English)"},{"location":"index.html#manual-for-bsb-lan-english","text":"","title":"Manual for BSB-LAN (English)"},{"location":"EN/index.html","text":"Where and how do I begin? You are an experienced user? Head on to the quickstart instructions . Otherwise (or if you run into problems), please read on! Is my heating system supported by BSB-LAN? Please go to the list of supported heating systems . If you already know that your system is supported, find out more about the BSB-LAN adapter and where to get it. If you already have the adapter, you may want to know how to install the adapter . If you have installed the adapter, you will need to configure BSB-LAN . Once you have everything up and running, find out about how to use BSB-LAN or learn more about the ways to ingetrate BSB-LAN into home automation systems . If you run into troubles, have a look at the troubleshooting page . And before you ask anyone else any questions, have a look at our Frequently Asked Questions (FAQ) first!","title":"Overview"},{"location":"EN/index.html#where-and-how-do-i-begin","text":"You are an experienced user? Head on to the quickstart instructions . Otherwise (or if you run into problems), please read on! Is my heating system supported by BSB-LAN? Please go to the list of supported heating systems . If you already know that your system is supported, find out more about the BSB-LAN adapter and where to get it. If you already have the adapter, you may want to know how to install the adapter . If you have installed the adapter, you will need to configure BSB-LAN . Once you have everything up and running, find out about how to use BSB-LAN or learn more about the ways to ingetrate BSB-LAN into home automation systems . If you run into troubles, have a look at the troubleshooting page . And before you ask anyone else any questions, have a look at our Frequently Asked Questions (FAQ) first!","title":"Where and how do I begin?"},{"location":"EN/bsb-lan_adapter.html","text":"The BSB-LAN adapter In order to connect to your heating system with a microcontroller, you need to have an adapter board that does the necessary logic-level conversion: Adapter boards available - contact Frederik at bsb(\u00e4t)code-it.de (German or English) for more details. The adapter is then plugged right onto the microcontroller, either underneath the pins of the ESP32-NodeMCU or onto the UEXT connector of the Olimex: The two different types of ESP32 adapters (Olimex and ESP32-NoceMCU) only vary in the location of their connectors, the other parts of the board are identical. The Arduino Due board contains an EEPROM chip because the Due does not come with on-board EEPROM. Therefore, you can re-use the Arduino Due board on an ESP32 microcontroller (if you connect the correct pins with wires), but you cannot use an adapter for the ESP32 on an Arduino Due. Suitable microcontrollers BSB-LAN can be installed on three different types of microcontrollers: 1. ESP32-Olimex 1. ESP32-NodeMCU (30 pin version only!) and 1. Arduino Due. Olimex produces several kinds of boards: We recommend either the Olimex ESP32-EVB or the Olimex ESP32-POE-ISO . The simple POE version (without the \"ISO\") is not recommended because it does not allow to be connected to PoE Ethernet and USB at the same time. The Arduino Due requires an Ethernet Shield in order to access the local network. Each of the different controllers have their advantages and disadvantages: Functionality ESP32-Olimex ESP32-POE-ISO ESP32-NodeMCU Arduino Due Ethernet/LAN X X - X WiFi/WLAN X X X - Over-the-air updateable X X X - Built-in micro-SD card X X - - Accessible GPIOs 2 (GPIO13/16) some some many","title":"The BSB-LAN Adapter"},{"location":"EN/bsb-lan_adapter.html#the-bsb-lan-adapter","text":"In order to connect to your heating system with a microcontroller, you need to have an adapter board that does the necessary logic-level conversion:","title":"The BSB-LAN adapter"},{"location":"EN/bsb-lan_adapter.html#adapter-boards-available-contact-frederik-at-bsbatcode-itde-german-or-english-for-more-details","text":"The adapter is then plugged right onto the microcontroller, either underneath the pins of the ESP32-NodeMCU or onto the UEXT connector of the Olimex: The two different types of ESP32 adapters (Olimex and ESP32-NoceMCU) only vary in the location of their connectors, the other parts of the board are identical. The Arduino Due board contains an EEPROM chip because the Due does not come with on-board EEPROM. Therefore, you can re-use the Arduino Due board on an ESP32 microcontroller (if you connect the correct pins with wires), but you cannot use an adapter for the ESP32 on an Arduino Due.","title":"Adapter boards available - contact Frederik at bsb(\u00e4t)code-it.de (German or English) for more details."},{"location":"EN/bsb-lan_adapter.html#suitable-microcontrollers","text":"BSB-LAN can be installed on three different types of microcontrollers: 1. ESP32-Olimex 1. ESP32-NodeMCU (30 pin version only!) and 1. Arduino Due. Olimex produces several kinds of boards: We recommend either the Olimex ESP32-EVB or the Olimex ESP32-POE-ISO . The simple POE version (without the \"ISO\") is not recommended because it does not allow to be connected to PoE Ethernet and USB at the same time. The Arduino Due requires an Ethernet Shield in order to access the local network. Each of the different controllers have their advantages and disadvantages: Functionality ESP32-Olimex ESP32-POE-ISO ESP32-NodeMCU Arduino Due Ethernet/LAN X X - X WiFi/WLAN X X X - Over-the-air updateable X X X - Built-in micro-SD card X X - - Accessible GPIOs 2 (GPIO13/16) some some many","title":"Suitable microcontrollers"},{"location":"EN/configure.html","text":"Configuration There are two ways to configure BSB-LAN: 1. Through the configuration file BSB_LAN_config.h`` 1. Through the web-interface by calling [ http://bsb-lan.local/C](http://bsb-lan.local/C) (or the corresponding IP address) For the initial configuration, some settings have to be configured in the configuration file (such as language and network settings). Any further changes can be done also in the web-interface. It may, however, be useful to do the configuration (also) in the configuration file in case one needs to change the microcontroller. Almost all settings exist also in the web-interface and vice versa. Configuration through `BSB_LAN_config.h`` The configuration file consists of variables that are used in other parts of BSB-LAN. It is therefore important to only change the contents of the variables (i.e. the settings) and not the type of the variables. So if there is for example the setting byte ip_addr[4] = {192,168,178,88}; you must not alter the byte ip_addr[4] = part, only the contents, in this case the comma-separated IP address. Configuration through the web-interface Configuring BSB-LAN through the web-interface is pretty straightforward, as you don't have to deal with variable names but clear descriptions. Initially, only a selected number of configuration options are displayed in the webinterface. To have access to all of them, you have to set the \"extended configuration\" option to \"on\". Overview of configuration options Web-Interface Configuration File Functionality Possible settings - #define LANG Set language DE , EN , FR and other ISO country codes - #define DEFAULT_FLAG Set read/write access to heating system. FL_RONLY sets all parameters to read-only. FL_SW_CTL_RONLY allows setting read/write access via web-interface configuration setting. 0 makes all parameters that could be written writeable. Do not use this option unless instructed otherwise! FL_RONLY FL_SW_CTL_RONLY 0 Display extended configuration - Show all configuration options On Off Read config from EEPROM UseEEPROM Read configuration from EEPROM or file On ( 1 ) Off ( 0 ) Write access (level) - If DEFAULT_FLAG is set to FL_SW_CTL_RONLY , you can set the level of write access here. Off (read-only) On (Standard) On (Complete) Check for updates enable_version_check Query BSB-LAN server for new available version On ( true ) OTA Update enable_ota_update Enable OTA update On ( true ) Energy saving esp32_save_energy Reduces speed, saves energy. Do not enable when using WiFi. On ( true ) Off ( false ) Webserver file system webserver Enables serving files from SD card On ( true ) Off ( false ) Bus type bus_type Bus type (BSB/LPB/PPS) BSB ( 0 ) LPB ( 1 ) PPS ( 2 ) PPS: mode pps_write BSB-LAN can act as a PPS room unit (only if no real room unit is connected) or just listen passively. passive ( 0 ) as room unit ( 1 ) PPS: QAA model QAA_TYPE Room unit that should be simulated for PPS bus QAA70 ( 0x53 ), QAA50 ( 0x52 ), QAA95 ( 0x37 ), QAW10 ( 0x4D ), QAW20 ( 0x4E ), MCBA/REA70/DC225 ( 0x58 ), QAA10 ( 0x5A ), QAA20 ( 0x5B ), QAA12/13 ( 0x5D ), BMU ( 0x66 ), RVD130 ( 0x43 ) Own address own_address Own bus address (default 66 should not be changed) 66 ( 66 ) Destination address dest_address Destination bus address. For BSB always 0 . For LPB 0 if destination device is in segment 1, device address 0. To convert from LPB segment and device address notation to destination address, multiply segment by 16, add the device address and subtract one. For example, to address a device in segment 4 with device address 3, the destination address is (4 * 16) + 3 - 1 = 66 . For PPS not relevant. 0 ( 0 ) Device family fixed_device_family Set the device family that BSB-LAN should emulate. Leave at 0 for auto-detection. 0 ( 0 ) Device variant fixed_device_variant Set the device variant that BSB-LAN should emulate. Leave at 0 for auto-detection 0 ( 0 ) RX pin number TX pin number bus_pins Define the RX/TX pins to communicate with the BSB-LAN adapter. Leave at 0 for auto-detection. 0 and 0 ( 0, 0 ) Network device network_type Choose between WLAN and LAN to connect BSB-LAN to the network. LAN ( 0 ) WLAN ( 1 ) WLAN SSID wifi_ssid Set the WLAN network name when using WLAN. Your_WLAN_name ( Your_WLAN_name ) WLAN password wifi_pass Set the WLAN password when using WLAN. YourWLANpassword ( YourWLANpassword ) DHCP usage use_dhcp Set whether or not to use DHCP to get an IP address from the router. On ( true ) Off ( false ) IP address (fixed) ip_addr When not using DHCP, you can set a fixed IP address here. Otherwise leave at 0.0.0.0 . In the web-interface, you may use dot notation. In the configuration file, you have to use comma as a separator. 192.168.178.88 ( 192,168,178,88 ) Subnet subnet_addr Subnet when using fixed IP address. Same notation as with IP address. 255.255.255.0 ( 255,255,255,0 ) Gateway gateway_addr Gateway address when using fixed IP address. Same notation as with IP address. 192.168.178.1 ( 192,168,178,1 ) DNS Server dns_addr DNS server address when using fixed IP address. Same notation as with IP address. 192.168.178.1 ( 192,168,178,1 ) TCP Port HTTPPort HTTP port number to access the web-interface. Defaults to 80 . 80 ( 80 ) MAC address mac Set a fixed MAC address. Only relevant on Arduino. 00:80:41:19:69:90 ( 0x00, 0x80, 0x41, 0x19, 0x69, 0x90 ) mDNS Hostname mDNS_hostname Hostname for mDNS discovery BSB-LAN ( BSB-LAN ) HTTP authentification USER_PASS If not empty, this setting contains the username and password for HTTP authentification, separated by a colon. Username:Password ( Username:Password ) URL Passkey PASSKEY Passkey adds a user-defined sequence that needs to be added to the URL after the hostname. For example, a passkey of 1234 requires every URL to be written as http://bsb-lan.local/1234/ instead of just http://bsb-lan.local/1234/ . Leave empty for no passkey. 1234 ( 1234 ) Trusted IP address trusted_ip_addr Access to BSB-LAN is only possible from this IP address. Same notation as with IP address. 192.168.178.89 ( 192,168,178,89 ) Trusted IP address trusted_ip_addr2 Access to BSB-LAN is only possible from this IP address. Same notation as with IP address. 192.168.178.90 ( 192,168,178,90 ) Storage device LogDestination Select the destination for logging activities. SD card is highly recommended, as using the internal flash will wear out the internal flash eventually. SD card ( SDCARD ) Internal Flash Storage ( FLASH ) Logging mode LoggingMode Set the logging destinations/activities. Multiple selections are possible, for the configuration file, the values have to be added, for example, to send to MQTT broker and to UDP, set the value to 4 + 8 = 12 Write to SD card ( 1 ) Calculate 24h averages ( 2 ) Send to MQTT broker ( 4 ) Send to UDP ( 8 ) Logging Interval log_interval Interval for logging activities (in seconds) 60 ( 60 ) Log Parameters log_parameters List of logging parameters. See addressing instructions below. 8700, 8743!2, 8314!2 ( {8700, -1}, {8743, 2}, {8314, 2} ) Log bus telegrams logTelegram Log raw bus telegrams, such as broadcast messages or unknown telegrams Off ( LOGTELEGRAM_OFF ) Log all bus telegrams ( LOGTELEGRAM_ON ) Log unknown bus telegrams only ( LOGTELEGRAM_UNKNOWN_ONLY ) Log broadcast bus telegrams only ( LOGTELEGRAM_BROADCAST_ONLY ) Log unknown broadcast bus telegrams only ( LOGTELEGRAM_UNKNOWN_ONLY + LOGTELEGRAM_BROADCAST_ONLY ) 24h averages parameters avg_parameters List of parameters for generating 24 hour averages. See addressing instructions below. 8700, 8743!2, 8314!2 ( {8700, -1}, {8743, 2}, {8314, 2} ) MQTT Broker server mqtt_broker_addr Hostname/IP of the MQTT broker my-mqtt-broker.local ( my-mqtt-broker.local ) MQTT Username MQTTUsername Optional username for MQTT broker MyMQTTusername ( MyMQTTusername ) MQTT Password MQTTPassword Optional password for MQTT broker MyMQTTpassword ( MyMQTTpassword ) MQTT Device ID MQTTDeviceID Device identifier for MQTT BSB-LAN ( BSB-LAN ) MQTT Topic prefix MQTTTopicPrefix Topic prefix for MQTT BSB-LAN ( BSB-LAN ) MQTT Usage mqtt_mode Set the format for MQTT messages Plain text ( 1 ) - Send parameter number and value in plain text format JSON ( 2 ) - Send messages in JSON format (parameter number and value only) Rich JSON ( 3 ) - Send parameter number/name/value/unit/error in JSON format. OneWire Pins One_Wire_Pin Set the OneWire pin (use -1 in configuration file to disable) 10 ( 10 ) DHT Pins DHT_Pins Set the DHT22 sensor pins (use -1 in configuration file to disable) 11, 12, 13 ( 11, 12, 13, -1, -1, -1, -1, -1, -1, -1 ) BME280 sensors BME_Sensors Set number of BME280 sensors on the I2C bus. You need to have access to I2C pins. Fixed addresses 0x76 and 0x77 will be used. Use 0 to disable. 1 ( 1 ) MAX! Usage enable_max_cul Enable or disable connection to CUNO/CUNX/modified MAX!Cube On ( true ) Off ( false ) IP address cube max_cul_ip_addr IP address of the CUNO/CUNX/MAX!Cube 192.168.178.21 ( 192,168,178,21 ) MAX! Devices max_device_list IDs of MAX! devices to be polled KEQ0502326 , KEQ0505080, KHA0002948** ( \"KEQ0502326\",\"KEQ0505080\",\"KHA0002948\" ) IPWE Usage enable_ipwe Enable IPWE extension ( /ipwe.cgi ) On ( true ) Off ( false ) IPWE Parameters ipwe_parameters Debugging Usage debug_mode Select debug output Off ( 0 ) Serial ( 1 ) Telnet ( 2 ) Verbosity mode verbose Enable or disable verbose debug messages (do not turn off unless advised) On ( 1 ) Off ( 0 ) Monitor mode monitor Enable or disable monitor mode (do not turn on unless advised) On ( 1 ) Off ( 0 ) Display unknown parameters show_unknown Try and display also parameters not supported by destination device On ( true ) Off ( false ) Adressing different heating controllers In order to address parameters from devices other than the default destination device in the web-interface, you need to add an exclamation mark followed by the device address (see above for converting segment/device notation to device address). For example, parameter 8700 from device address 1 would be written as 8700!1 instead of just 8700 . For the configuration file, parameters are listed in the form {parameter number, destination address} . Parameter 8700 from device address 1 would thus be written as {8700, 1} . To address the default destination, you can do so by using -1 .","title":"Configuration"},{"location":"EN/configure.html#configuration","text":"There are two ways to configure BSB-LAN: 1. Through the configuration file BSB_LAN_config.h`` 1. Through the web-interface by calling [ http://bsb-lan.local/C](http://bsb-lan.local/C) (or the corresponding IP address) For the initial configuration, some settings have to be configured in the configuration file (such as language and network settings). Any further changes can be done also in the web-interface. It may, however, be useful to do the configuration (also) in the configuration file in case one needs to change the microcontroller. Almost all settings exist also in the web-interface and vice versa.","title":"Configuration"},{"location":"EN/configure.html#configuration-through-bsb_lan_configh","text":"The configuration file consists of variables that are used in other parts of BSB-LAN. It is therefore important to only change the contents of the variables (i.e. the settings) and not the type of the variables. So if there is for example the setting byte ip_addr[4] = {192,168,178,88}; you must not alter the byte ip_addr[4] = part, only the contents, in this case the comma-separated IP address.","title":"Configuration through `BSB_LAN_config.h``"},{"location":"EN/configure.html#configuration-through-the-web-interface","text":"Configuring BSB-LAN through the web-interface is pretty straightforward, as you don't have to deal with variable names but clear descriptions. Initially, only a selected number of configuration options are displayed in the webinterface. To have access to all of them, you have to set the \"extended configuration\" option to \"on\".","title":"Configuration through the web-interface"},{"location":"EN/configure.html#overview-of-configuration-options","text":"Web-Interface Configuration File Functionality Possible settings - #define LANG Set language DE , EN , FR and other ISO country codes - #define DEFAULT_FLAG Set read/write access to heating system. FL_RONLY sets all parameters to read-only. FL_SW_CTL_RONLY allows setting read/write access via web-interface configuration setting. 0 makes all parameters that could be written writeable. Do not use this option unless instructed otherwise! FL_RONLY FL_SW_CTL_RONLY 0 Display extended configuration - Show all configuration options On Off Read config from EEPROM UseEEPROM Read configuration from EEPROM or file On ( 1 ) Off ( 0 ) Write access (level) - If DEFAULT_FLAG is set to FL_SW_CTL_RONLY , you can set the level of write access here. Off (read-only) On (Standard) On (Complete) Check for updates enable_version_check Query BSB-LAN server for new available version On ( true ) OTA Update enable_ota_update Enable OTA update On ( true ) Energy saving esp32_save_energy Reduces speed, saves energy. Do not enable when using WiFi. On ( true ) Off ( false ) Webserver file system webserver Enables serving files from SD card On ( true ) Off ( false ) Bus type bus_type Bus type (BSB/LPB/PPS) BSB ( 0 ) LPB ( 1 ) PPS ( 2 ) PPS: mode pps_write BSB-LAN can act as a PPS room unit (only if no real room unit is connected) or just listen passively. passive ( 0 ) as room unit ( 1 ) PPS: QAA model QAA_TYPE Room unit that should be simulated for PPS bus QAA70 ( 0x53 ), QAA50 ( 0x52 ), QAA95 ( 0x37 ), QAW10 ( 0x4D ), QAW20 ( 0x4E ), MCBA/REA70/DC225 ( 0x58 ), QAA10 ( 0x5A ), QAA20 ( 0x5B ), QAA12/13 ( 0x5D ), BMU ( 0x66 ), RVD130 ( 0x43 ) Own address own_address Own bus address (default 66 should not be changed) 66 ( 66 ) Destination address dest_address Destination bus address. For BSB always 0 . For LPB 0 if destination device is in segment 1, device address 0. To convert from LPB segment and device address notation to destination address, multiply segment by 16, add the device address and subtract one. For example, to address a device in segment 4 with device address 3, the destination address is (4 * 16) + 3 - 1 = 66 . For PPS not relevant. 0 ( 0 ) Device family fixed_device_family Set the device family that BSB-LAN should emulate. Leave at 0 for auto-detection. 0 ( 0 ) Device variant fixed_device_variant Set the device variant that BSB-LAN should emulate. Leave at 0 for auto-detection 0 ( 0 ) RX pin number TX pin number bus_pins Define the RX/TX pins to communicate with the BSB-LAN adapter. Leave at 0 for auto-detection. 0 and 0 ( 0, 0 ) Network device network_type Choose between WLAN and LAN to connect BSB-LAN to the network. LAN ( 0 ) WLAN ( 1 ) WLAN SSID wifi_ssid Set the WLAN network name when using WLAN. Your_WLAN_name ( Your_WLAN_name ) WLAN password wifi_pass Set the WLAN password when using WLAN. YourWLANpassword ( YourWLANpassword ) DHCP usage use_dhcp Set whether or not to use DHCP to get an IP address from the router. On ( true ) Off ( false ) IP address (fixed) ip_addr When not using DHCP, you can set a fixed IP address here. Otherwise leave at 0.0.0.0 . In the web-interface, you may use dot notation. In the configuration file, you have to use comma as a separator. 192.168.178.88 ( 192,168,178,88 ) Subnet subnet_addr Subnet when using fixed IP address. Same notation as with IP address. 255.255.255.0 ( 255,255,255,0 ) Gateway gateway_addr Gateway address when using fixed IP address. Same notation as with IP address. 192.168.178.1 ( 192,168,178,1 ) DNS Server dns_addr DNS server address when using fixed IP address. Same notation as with IP address. 192.168.178.1 ( 192,168,178,1 ) TCP Port HTTPPort HTTP port number to access the web-interface. Defaults to 80 . 80 ( 80 ) MAC address mac Set a fixed MAC address. Only relevant on Arduino. 00:80:41:19:69:90 ( 0x00, 0x80, 0x41, 0x19, 0x69, 0x90 ) mDNS Hostname mDNS_hostname Hostname for mDNS discovery BSB-LAN ( BSB-LAN ) HTTP authentification USER_PASS If not empty, this setting contains the username and password for HTTP authentification, separated by a colon. Username:Password ( Username:Password ) URL Passkey PASSKEY Passkey adds a user-defined sequence that needs to be added to the URL after the hostname. For example, a passkey of 1234 requires every URL to be written as http://bsb-lan.local/1234/ instead of just http://bsb-lan.local/1234/ . Leave empty for no passkey. 1234 ( 1234 ) Trusted IP address trusted_ip_addr Access to BSB-LAN is only possible from this IP address. Same notation as with IP address. 192.168.178.89 ( 192,168,178,89 ) Trusted IP address trusted_ip_addr2 Access to BSB-LAN is only possible from this IP address. Same notation as with IP address. 192.168.178.90 ( 192,168,178,90 ) Storage device LogDestination Select the destination for logging activities. SD card is highly recommended, as using the internal flash will wear out the internal flash eventually. SD card ( SDCARD ) Internal Flash Storage ( FLASH ) Logging mode LoggingMode Set the logging destinations/activities. Multiple selections are possible, for the configuration file, the values have to be added, for example, to send to MQTT broker and to UDP, set the value to 4 + 8 = 12 Write to SD card ( 1 ) Calculate 24h averages ( 2 ) Send to MQTT broker ( 4 ) Send to UDP ( 8 ) Logging Interval log_interval Interval for logging activities (in seconds) 60 ( 60 ) Log Parameters log_parameters List of logging parameters. See addressing instructions below. 8700, 8743!2, 8314!2 ( {8700, -1}, {8743, 2}, {8314, 2} ) Log bus telegrams logTelegram Log raw bus telegrams, such as broadcast messages or unknown telegrams Off ( LOGTELEGRAM_OFF ) Log all bus telegrams ( LOGTELEGRAM_ON ) Log unknown bus telegrams only ( LOGTELEGRAM_UNKNOWN_ONLY ) Log broadcast bus telegrams only ( LOGTELEGRAM_BROADCAST_ONLY ) Log unknown broadcast bus telegrams only ( LOGTELEGRAM_UNKNOWN_ONLY + LOGTELEGRAM_BROADCAST_ONLY ) 24h averages parameters avg_parameters List of parameters for generating 24 hour averages. See addressing instructions below. 8700, 8743!2, 8314!2 ( {8700, -1}, {8743, 2}, {8314, 2} ) MQTT Broker server mqtt_broker_addr Hostname/IP of the MQTT broker my-mqtt-broker.local ( my-mqtt-broker.local ) MQTT Username MQTTUsername Optional username for MQTT broker MyMQTTusername ( MyMQTTusername ) MQTT Password MQTTPassword Optional password for MQTT broker MyMQTTpassword ( MyMQTTpassword ) MQTT Device ID MQTTDeviceID Device identifier for MQTT BSB-LAN ( BSB-LAN ) MQTT Topic prefix MQTTTopicPrefix Topic prefix for MQTT BSB-LAN ( BSB-LAN ) MQTT Usage mqtt_mode Set the format for MQTT messages Plain text ( 1 ) - Send parameter number and value in plain text format JSON ( 2 ) - Send messages in JSON format (parameter number and value only) Rich JSON ( 3 ) - Send parameter number/name/value/unit/error in JSON format. OneWire Pins One_Wire_Pin Set the OneWire pin (use -1 in configuration file to disable) 10 ( 10 ) DHT Pins DHT_Pins Set the DHT22 sensor pins (use -1 in configuration file to disable) 11, 12, 13 ( 11, 12, 13, -1, -1, -1, -1, -1, -1, -1 ) BME280 sensors BME_Sensors Set number of BME280 sensors on the I2C bus. You need to have access to I2C pins. Fixed addresses 0x76 and 0x77 will be used. Use 0 to disable. 1 ( 1 ) MAX! Usage enable_max_cul Enable or disable connection to CUNO/CUNX/modified MAX!Cube On ( true ) Off ( false ) IP address cube max_cul_ip_addr IP address of the CUNO/CUNX/MAX!Cube 192.168.178.21 ( 192,168,178,21 ) MAX! Devices max_device_list IDs of MAX! devices to be polled KEQ0502326 , KEQ0505080, KHA0002948** ( \"KEQ0502326\",\"KEQ0505080\",\"KHA0002948\" ) IPWE Usage enable_ipwe Enable IPWE extension ( /ipwe.cgi ) On ( true ) Off ( false ) IPWE Parameters ipwe_parameters Debugging Usage debug_mode Select debug output Off ( 0 ) Serial ( 1 ) Telnet ( 2 ) Verbosity mode verbose Enable or disable verbose debug messages (do not turn off unless advised) On ( 1 ) Off ( 0 ) Monitor mode monitor Enable or disable monitor mode (do not turn on unless advised) On ( 1 ) Off ( 0 ) Display unknown parameters show_unknown Try and display also parameters not supported by destination device On ( true ) Off ( false )","title":"Overview of configuration options"},{"location":"EN/configure.html#adressing-different-heating-controllers","text":"In order to address parameters from devices other than the default destination device in the web-interface, you need to add an exclamation mark followed by the device address (see above for converting segment/device notation to device address). For example, parameter 8700 from device address 1 would be written as 8700!1 instead of just 8700 . For the configuration file, parameters are listed in the form {parameter number, destination address} . Parameter 8700 from device address 1 would thus be written as {8700, 1} . To address the default destination, you can do so by using -1 .","title":"Adressing different heating controllers"},{"location":"EN/faq.html","text":"Frequently Asked Questions [FAQ]","title":"FAQ"},{"location":"EN/faq.html#frequently-asked-questions-faq","text":"","title":"Frequently Asked Questions [FAQ]"},{"location":"EN/homeautomation.html","text":"Connecting BSB-LAN to home automation systems BSB-LAN provides three ways to connect to home automation systems: 1. Exchanging data via MQTT (recommended) 2. Exchanging data via JSON 3. Exchanging data via URL commands and screen scraping 4. Using supported modules for specific home automation systems Exchanging data via MQTT This is the recommended way to connect BSB-LAN to home automation systems because it allows seamless exchange of data. As a prerequisite, a MQTT broker (such as mosquitto is needed, either running locally or via making use of a public service. Some home automation systems such as Home Assistant offer the installation of mosquitto as part of their software. In BSB-LAN, you need to make or enable at least the following configurations: Set Logging mode (additionally) to Send to MQTT Broker . Set Log Interval to the time (in seconds) you want the log parameters to be published. Select up to 20 Log Parameters you want to be sent to your home automation system. Set MQTT Usage to plain text Set MQTT Broker Server to the hostname of your MQTT broker (such as the mosquitto server) If your home automation system supports MQTT auto-discovery (as is the case with Home Assistant), you can call URL command /M1 and BSB-LAN will send auto-discovery messages for all available parameters to the MQTT broker and thus to the home automation system. You may have to clean up afterwards or send a removal message for all these parameters using URL command /M0 . Every time a query is made in BSB-LAN or a parameter changes its value through the room unit, the new value will be sent to the MQTT broker, so even changes made outside of BSB-LAN should be updated into the home automation system, which is why the MQTT approach is the recommended way to connect to a home automation system. Examples for querying or setting parameters via MQTT would look like this (using mosquitto): Query the outside temperature (parameter 8700): mosquitto_pub -h my.mosquitto-broker.local -u USER -P PASSWORD -m \"8700\" -t BSB-LAN -d Set the comfort temperature setpoint (parameter 710) to 20 degrees: mosquitto_pub -h my.mosquitto-broker.local -u USER -P PASSWORD -m \"S700=20\" -t BSB-LAN -d Exchanging data via JSON BSB-LAN allows to query and set parameters via JSON structures and also provides numerous information about the parameters and category structures this way. The JSON API is accessd via URL commands and the openapi.yaml file provided in this repository can be used with Swagger to explore its possibilities and functionalitites. Exchanging data via URL commands and screen scraping For simpler solutions, using the URL commands to query and set parameters can be used to control BSB-LAN from other systems. Screen scraping is possible since the project tries not to break certain ways of displaying data, so that parsing with regular expressions remains feasible. Nevertheless, for most scenarios one of the other options will probably be preferrable. Using supported modules for specific home automation systems For some systems, specific modules exist that can be used to access BSB-LAN seamlessly: Homebridge BSB-LAN user Michael has written a plugin for Homebridge . Thank you! ioBroker GitHub user @hacki11 has developed an adapter for ioBroker . Thank you! Jeedom GitHub user @bernard-dandrea has written a plugin for Jeedom (with a French description). Thank you! Node-RED GitHub user @konne wrote a module for Node-RED . Thank you! OpenHAB Since version 2.5.4, there exists a binding that is officially part of OpenHAB SmartHomeNG GitHub user @thensty wrote a plugin for SmartHomeNG . Thank you! Volkszaehler GitHub user @lapixo has contributed a script for the Volkszaehler project . Thank you! Bash script GitHub user @khfm has written Bash scripts to query data and display it using gnuplot. Thank you!","title":"Connect to Home Automation Systems"},{"location":"EN/homeautomation.html#connecting-bsb-lan-to-home-automation-systems","text":"BSB-LAN provides three ways to connect to home automation systems: 1. Exchanging data via MQTT (recommended) 2. Exchanging data via JSON 3. Exchanging data via URL commands and screen scraping 4. Using supported modules for specific home automation systems","title":"Connecting BSB-LAN to home automation systems"},{"location":"EN/homeautomation.html#exchanging-data-via-mqtt","text":"This is the recommended way to connect BSB-LAN to home automation systems because it allows seamless exchange of data. As a prerequisite, a MQTT broker (such as mosquitto is needed, either running locally or via making use of a public service. Some home automation systems such as Home Assistant offer the installation of mosquitto as part of their software. In BSB-LAN, you need to make or enable at least the following configurations: Set Logging mode (additionally) to Send to MQTT Broker . Set Log Interval to the time (in seconds) you want the log parameters to be published. Select up to 20 Log Parameters you want to be sent to your home automation system. Set MQTT Usage to plain text Set MQTT Broker Server to the hostname of your MQTT broker (such as the mosquitto server) If your home automation system supports MQTT auto-discovery (as is the case with Home Assistant), you can call URL command /M1 and BSB-LAN will send auto-discovery messages for all available parameters to the MQTT broker and thus to the home automation system. You may have to clean up afterwards or send a removal message for all these parameters using URL command /M0 . Every time a query is made in BSB-LAN or a parameter changes its value through the room unit, the new value will be sent to the MQTT broker, so even changes made outside of BSB-LAN should be updated into the home automation system, which is why the MQTT approach is the recommended way to connect to a home automation system. Examples for querying or setting parameters via MQTT would look like this (using mosquitto): Query the outside temperature (parameter 8700): mosquitto_pub -h my.mosquitto-broker.local -u USER -P PASSWORD -m \"8700\" -t BSB-LAN -d Set the comfort temperature setpoint (parameter 710) to 20 degrees: mosquitto_pub -h my.mosquitto-broker.local -u USER -P PASSWORD -m \"S700=20\" -t BSB-LAN -d","title":"Exchanging data via MQTT"},{"location":"EN/homeautomation.html#exchanging-data-via-json","text":"BSB-LAN allows to query and set parameters via JSON structures and also provides numerous information about the parameters and category structures this way. The JSON API is accessd via URL commands and the openapi.yaml file provided in this repository can be used with Swagger to explore its possibilities and functionalitites.","title":"Exchanging data via JSON"},{"location":"EN/homeautomation.html#exchanging-data-via-url-commands-and-screen-scraping","text":"For simpler solutions, using the URL commands to query and set parameters can be used to control BSB-LAN from other systems. Screen scraping is possible since the project tries not to break certain ways of displaying data, so that parsing with regular expressions remains feasible. Nevertheless, for most scenarios one of the other options will probably be preferrable.","title":"Exchanging data via URL commands and screen scraping"},{"location":"EN/homeautomation.html#using-supported-modules-for-specific-home-automation-systems","text":"For some systems, specific modules exist that can be used to access BSB-LAN seamlessly:","title":"Using supported modules for specific home automation systems"},{"location":"EN/homeautomation.html#homebridge","text":"BSB-LAN user Michael has written a plugin for Homebridge . Thank you!","title":"Homebridge"},{"location":"EN/homeautomation.html#iobroker","text":"GitHub user @hacki11 has developed an adapter for ioBroker . Thank you!","title":"ioBroker"},{"location":"EN/homeautomation.html#jeedom","text":"GitHub user @bernard-dandrea has written a plugin for Jeedom (with a French description). Thank you!","title":"Jeedom"},{"location":"EN/homeautomation.html#node-red","text":"GitHub user @konne wrote a module for Node-RED . Thank you!","title":"Node-RED"},{"location":"EN/homeautomation.html#openhab","text":"Since version 2.5.4, there exists a binding that is officially part of OpenHAB","title":"OpenHAB"},{"location":"EN/homeautomation.html#smarthomeng","text":"GitHub user @thensty wrote a plugin for SmartHomeNG . Thank you!","title":"SmartHomeNG"},{"location":"EN/homeautomation.html#volkszaehler","text":"GitHub user @lapixo has contributed a script for the Volkszaehler project . Thank you!","title":"Volkszaehler"},{"location":"EN/homeautomation.html#bash-script","text":"GitHub user @khfm has written Bash scripts to query data and display it using gnuplot. Thank you!","title":"Bash script"},{"location":"EN/install.html","text":"Installation Installing BSB-LAN requires three steps: 1. Installing the Arduino IDE in order to flash the BSB-LAN software onto the microcontroller 1. Assembling the hardware parts 1. Connecting BSB-LAN to the heating system Installing the Arduino IDE and flashing BSB-LAN Download and unpack the current BSB-LAN version from the master repository or use git to clone the repository. Navigate to the BSB_LAN folder and rename the following files: BSB_LAN_custom_defs.h.default to BSB_LAN_custom_defs.h BSB_LAN_config.h.default to BSB_LAN_config.h . Download and install the Arduino IDE for your system. Connect your microcontroller (ESP32 or Arduino Due) to your computer and start the Arduino IDE. Go to Tools/Board/Board Manager and make sure that the framework for your board is installed (\"esp32 by Espressif Systems\" for ESP32 microcontroller, \"Arduino SAM Boards (32-bits ARM Cortex-M3) by Arduino\" for Arduino Due microcontroller) Again, go to Tools/Board and select your microcontroller: ESP32 Dev Module for the Joy-It ESP32 NodeMCU. Olimex ESP32-EVB for the ESP32-based Olimex EVB . Olimex ESP32-POE-ISO for the ESP32-based Olimex POE ISO Arduino Due (Programming Port) for the Arduino Due. Do not use the Native USB Port here ! Again, go to Tools/Board and select the proper upload speed (460800 for ESP32, 115200 for Arduino Due). For ESP32-based microcontrollers, again, go to Tools/Board and select \"Minimal SPIFFS (Large APPS with OTA)\" for partition scheme. If you don't set the correct parition scheme, the firmware will not fit into the ESP32! Go to File/Open and navigate to the BSB_LAN folder and double-click on BSB_LAN.ino . The project will open. You may now proceed to configure BSB-LAN. When you are done configuring, go to Sketch/Upload and upload the BSB-LAN software to the microcontroller. Assembling the BSB-LAN adapter You can either get a fully assembled adapter from Frederik (bsb(\u00e4t)code-it.de) or build one on your own (see the folder schematics for the schematics). Once you have the BSB-LAN adapter ready, you just need to plug it into the microcontroller. If you are using an Olimex microcontroller, double-check that the adapter really sits in the center of the connector, because it still fits even if it is moved by one pin row to the left or right. Connecting BSB-LAN to the heating system Once the microcontroller and the BSB-LAN adapter are ready, perform the following stes to connect BSB-LAN to the heating system: 1. Unplug the microcontroller from your computer and turn off your heating system. Locate the BSB/LPB/PPS connectors. You may have to open your heating system for that. Have a look at the list of supported heating systems to get an idea where the pins are located. Do all this at your own risk! Especially take care to prevent electrostatic discharge (ESD) which can destroy both BSB-LAN and the heating controller! 1. Now plug the BSB-LAN adapter onto the microcontroller and connect the + screw connector to the CL+ (BSB), DB (LPB) or A6 (PPS, different connector names are possible) connector, and the - screw connector to the CL- (BSB), MB (LPB) or M (PPS) connector. 1. Power on the microcontroller via the USB port or via PoE (Olimex POE-ISO only). Then power on the heating system. The red LED of the BSB-LAN adapter should turn on. It should flicker occasionally. 1. Now open your webbrowser and open the IP address of BSB-LAN. If MDNS is enabled, you can directly go to http://bsb-lan.local . You can find the IP address of BSB-LAN either in your router, or you connect the microcontroller to your PC and open the Arduino IDE and go to Tools/Serial Monitor . Restart the microcontroller, and the IP address will be displayed upon connecting to the network. Generating the device-specific parameter list Once you access BSB-LAN for the first time, you will see that only very few parameters are shown on the device\u2019s web interface. This is because each model of the Siemens controller built into your heating system supports a different set of parameters. Previously, I provided a list of parameters collected from all different kinds of heating systems, but it turned out that this list was ambiguous or even contained errors that we couldn\u2019t fix reliably. This list is still available in release version 2.2.x of BSB-LAN and can be copied from there if needed. However, it is not advisable to do so because the said ambiguities and errors pose too great a risk of misconfiguring the heating system. Instead, it is recommended to click on the \" Device-specific parameter list \" button in BSB-LAN's menu and send the generated list to Frederik (bsb(\u00e4t)code-it.de). From this file, a parameter list can be generated that fits exactly the controller of your heating system. Unfortunately, this process cannot be automated yet, but at least it has to be done just once. These raw data do not contain any settings or other kinds of personal data, just the parameter structure of the heating system. It\u2019s in my own interest to create and return these parameter lists without any delay, but I ask for your understanding if it takes a bit longer due to work or family matters.","title":"Installation"},{"location":"EN/install.html#installation","text":"Installing BSB-LAN requires three steps: 1. Installing the Arduino IDE in order to flash the BSB-LAN software onto the microcontroller 1. Assembling the hardware parts 1. Connecting BSB-LAN to the heating system","title":"Installation"},{"location":"EN/install.html#installing-the-arduino-ide-and-flashing-bsb-lan","text":"Download and unpack the current BSB-LAN version from the master repository or use git to clone the repository. Navigate to the BSB_LAN folder and rename the following files: BSB_LAN_custom_defs.h.default to BSB_LAN_custom_defs.h BSB_LAN_config.h.default to BSB_LAN_config.h . Download and install the Arduino IDE for your system. Connect your microcontroller (ESP32 or Arduino Due) to your computer and start the Arduino IDE. Go to Tools/Board/Board Manager and make sure that the framework for your board is installed (\"esp32 by Espressif Systems\" for ESP32 microcontroller, \"Arduino SAM Boards (32-bits ARM Cortex-M3) by Arduino\" for Arduino Due microcontroller) Again, go to Tools/Board and select your microcontroller: ESP32 Dev Module for the Joy-It ESP32 NodeMCU. Olimex ESP32-EVB for the ESP32-based Olimex EVB . Olimex ESP32-POE-ISO for the ESP32-based Olimex POE ISO Arduino Due (Programming Port) for the Arduino Due. Do not use the Native USB Port here ! Again, go to Tools/Board and select the proper upload speed (460800 for ESP32, 115200 for Arduino Due). For ESP32-based microcontrollers, again, go to Tools/Board and select \"Minimal SPIFFS (Large APPS with OTA)\" for partition scheme. If you don't set the correct parition scheme, the firmware will not fit into the ESP32! Go to File/Open and navigate to the BSB_LAN folder and double-click on BSB_LAN.ino . The project will open. You may now proceed to configure BSB-LAN. When you are done configuring, go to Sketch/Upload and upload the BSB-LAN software to the microcontroller.","title":"Installing the Arduino IDE and flashing BSB-LAN"},{"location":"EN/install.html#assembling-the-bsb-lan-adapter","text":"You can either get a fully assembled adapter from Frederik (bsb(\u00e4t)code-it.de) or build one on your own (see the folder schematics for the schematics). Once you have the BSB-LAN adapter ready, you just need to plug it into the microcontroller. If you are using an Olimex microcontroller, double-check that the adapter really sits in the center of the connector, because it still fits even if it is moved by one pin row to the left or right.","title":"Assembling the BSB-LAN adapter"},{"location":"EN/install.html#connecting-bsb-lan-to-the-heating-system","text":"Once the microcontroller and the BSB-LAN adapter are ready, perform the following stes to connect BSB-LAN to the heating system: 1. Unplug the microcontroller from your computer and turn off your heating system. Locate the BSB/LPB/PPS connectors. You may have to open your heating system for that. Have a look at the list of supported heating systems to get an idea where the pins are located. Do all this at your own risk! Especially take care to prevent electrostatic discharge (ESD) which can destroy both BSB-LAN and the heating controller! 1. Now plug the BSB-LAN adapter onto the microcontroller and connect the + screw connector to the CL+ (BSB), DB (LPB) or A6 (PPS, different connector names are possible) connector, and the - screw connector to the CL- (BSB), MB (LPB) or M (PPS) connector. 1. Power on the microcontroller via the USB port or via PoE (Olimex POE-ISO only). Then power on the heating system. The red LED of the BSB-LAN adapter should turn on. It should flicker occasionally. 1. Now open your webbrowser and open the IP address of BSB-LAN. If MDNS is enabled, you can directly go to http://bsb-lan.local . You can find the IP address of BSB-LAN either in your router, or you connect the microcontroller to your PC and open the Arduino IDE and go to Tools/Serial Monitor . Restart the microcontroller, and the IP address will be displayed upon connecting to the network.","title":"Connecting BSB-LAN to the heating system"},{"location":"EN/install.html#generating-the-device-specific-parameter-list","text":"Once you access BSB-LAN for the first time, you will see that only very few parameters are shown on the device\u2019s web interface. This is because each model of the Siemens controller built into your heating system supports a different set of parameters. Previously, I provided a list of parameters collected from all different kinds of heating systems, but it turned out that this list was ambiguous or even contained errors that we couldn\u2019t fix reliably. This list is still available in release version 2.2.x of BSB-LAN and can be copied from there if needed. However, it is not advisable to do so because the said ambiguities and errors pose too great a risk of misconfiguring the heating system. Instead, it is recommended to click on the \" Device-specific parameter list \" button in BSB-LAN's menu and send the generated list to Frederik (bsb(\u00e4t)code-it.de). From this file, a parameter list can be generated that fits exactly the controller of your heating system. Unfortunately, this process cannot be automated yet, but at least it has to be done just once. These raw data do not contain any settings or other kinds of personal data, just the parameter structure of the heating system. It\u2019s in my own interest to create and return these parameter lists without any delay, but I ask for your understanding if it takes a bit longer due to work or family matters.","title":"Generating the device-specific parameter list"},{"location":"EN/quickstart.html","text":"Quickstart instructions These quickstart instructions are for users who are familiar with installing and configuring software on their computer. If you need more detailed instructions, please head to the install instructions ! Download and unpack the current BSB-LAN version from the master repository or use git to clone the repository. Navigate to the BSB_LAN folder and rename the following files: BSB_LAN_custom_defs.h.default to BSB_LAN_custom_defs.h BSB_LAN_config.h.default to BSB_LAN_config.h . Download and install the Arduino IDE for your system. Connect your microcontroller (ESP32 or Arduino Due) to your computer and start the Arduino IDE. Go to Tools/Board/Board Manager and make sure that the framework for your board is installed (\"esp32 by Espressif Systems\" for ESP32 microcontroller, \"Arduino SAM Boards (32-bits ARM Cortex-M3) by Arduino\" for Arduino Due microcontroller) Again, go to Tools/Board and select your microcontroller: ESP32 Dev Module for the Joy-It ESP32 NodeMCU. Olimex ESP32-EVB for the ESP32-based Olimex EVB . Olimex ESP32-POE-ISO for the ESP32-based Olimex POE ISO Arduino Due (Programming Port) for the Arduino Due. Do not use the Native USB Port here ! Again, go to Tools/Board and select the proper upload speed (460800 for ESP32, 115200 for Arduino Due). Go to File/Open and navigate to the BSB_LAN folder and double-click on BSB_LAN.ino . The project will open. Click on the tab with the filename BSB_LAN_config.h and configure at least the following: Search for #define LANG DE : Change this to EN for English, FR for French etc. Search for uint8_t network_type : Set this to LAN if you are using Ethernet/LAN connection. Set this to WLAN if you are using WiFi/WLAN. If you are not using DHCP, configure the following options according to your network (make sure to use a comma, not a dot for IP addresses!): byte ip_addr[4] = {192,168,178,88}; byte gateway_addr[4] = {192,168,178,1}; byte dns_addr[4] = {192,168,178,1}; byte subnet_addr[4] = {255,255,255,0}; char wifi_ssid[32] = \"***Your Wifi network name***\"; char wifi_pass[32] = \"***Your WiFi network password***\"; Now go to Sketch/Upload and upload the BSB-LAN software to the microcontroller. Unplug the microcontroller and turn off your heating system. Locate the BSB/LPB/PPS connectors. You may have to open your heating system for that. Do all this at your own risk! Now plug the BSB-LAN adapter onto the microcontroller and connect the + screw connector to the CL+ (BSB), DB (LPB) or A6 (PPS, different connector names are possible) connector, and the - screw connector to the CL- (BSB), MB (LPB) or M (PPS) connector. Power on the microcontroller via the USB port or via PoE (Olimex POE-ISO only). Then power on the heating system. The red LED of the BSB-LAN adapter should turn on. It should flicker occasionally. Now open your webbrowser and open the IP address of BSB-LAN. If MDNS is enabled, you can directly go to http://bsb-lan.local . You can find the IP address of BSB-LAN either in your router, or you connect the microcontroller to your PC and open the Arduino IDE and go to Tools/Serial Monitor . Restart the microcontroller, and the IP address will be displayed upon connecting to the network. Done :-) Why do I only see so few parameters? Once you access BSB-LAN for the first time, you will see that only very few parameters are shown on the device\u2019s web interface. This is because each model of the Siemens controller built into your heating system supports a different set of parameters. Previously, I provided a list of parameters collected from all different kinds of heating systems, but it turned out that this list was ambiguous or even contained errors that we couldn\u2019t fix reliably. This list is still available in release version 2.2.x of BSB-LAN and can be copied from there if needed. However, it is not advisable to do so because the said ambiguities and errors pose too great a risk of misconfiguring the heating system. Instead, it is recommended to click on the \" Device-specific parameter list \" button in BSB-LAN's menu and send the generated list to Frederik (bsb(\u00e4t)code-it.de). From this file, a parameter list can be generated that fits exactly the controller of your heating system. Unfortunately, this process cannot be automated yet, but at least it has to be done just once. These raw data do not contain any settings or other kinds of personal data, just the parameter structure of the heating system. It\u2019s in my own interest to create and return these parameter lists without any delay, but I ask for your understanding if it takes a bit longer due to work or family matters.","title":"Quickstart"},{"location":"EN/quickstart.html#quickstart-instructions","text":"These quickstart instructions are for users who are familiar with installing and configuring software on their computer. If you need more detailed instructions, please head to the install instructions ! Download and unpack the current BSB-LAN version from the master repository or use git to clone the repository. Navigate to the BSB_LAN folder and rename the following files: BSB_LAN_custom_defs.h.default to BSB_LAN_custom_defs.h BSB_LAN_config.h.default to BSB_LAN_config.h . Download and install the Arduino IDE for your system. Connect your microcontroller (ESP32 or Arduino Due) to your computer and start the Arduino IDE. Go to Tools/Board/Board Manager and make sure that the framework for your board is installed (\"esp32 by Espressif Systems\" for ESP32 microcontroller, \"Arduino SAM Boards (32-bits ARM Cortex-M3) by Arduino\" for Arduino Due microcontroller) Again, go to Tools/Board and select your microcontroller: ESP32 Dev Module for the Joy-It ESP32 NodeMCU. Olimex ESP32-EVB for the ESP32-based Olimex EVB . Olimex ESP32-POE-ISO for the ESP32-based Olimex POE ISO Arduino Due (Programming Port) for the Arduino Due. Do not use the Native USB Port here ! Again, go to Tools/Board and select the proper upload speed (460800 for ESP32, 115200 for Arduino Due). Go to File/Open and navigate to the BSB_LAN folder and double-click on BSB_LAN.ino . The project will open. Click on the tab with the filename BSB_LAN_config.h and configure at least the following: Search for #define LANG DE : Change this to EN for English, FR for French etc. Search for uint8_t network_type : Set this to LAN if you are using Ethernet/LAN connection. Set this to WLAN if you are using WiFi/WLAN. If you are not using DHCP, configure the following options according to your network (make sure to use a comma, not a dot for IP addresses!): byte ip_addr[4] = {192,168,178,88}; byte gateway_addr[4] = {192,168,178,1}; byte dns_addr[4] = {192,168,178,1}; byte subnet_addr[4] = {255,255,255,0}; char wifi_ssid[32] = \"***Your Wifi network name***\"; char wifi_pass[32] = \"***Your WiFi network password***\"; Now go to Sketch/Upload and upload the BSB-LAN software to the microcontroller. Unplug the microcontroller and turn off your heating system. Locate the BSB/LPB/PPS connectors. You may have to open your heating system for that. Do all this at your own risk! Now plug the BSB-LAN adapter onto the microcontroller and connect the + screw connector to the CL+ (BSB), DB (LPB) or A6 (PPS, different connector names are possible) connector, and the - screw connector to the CL- (BSB), MB (LPB) or M (PPS) connector. Power on the microcontroller via the USB port or via PoE (Olimex POE-ISO only). Then power on the heating system. The red LED of the BSB-LAN adapter should turn on. It should flicker occasionally. Now open your webbrowser and open the IP address of BSB-LAN. If MDNS is enabled, you can directly go to http://bsb-lan.local . You can find the IP address of BSB-LAN either in your router, or you connect the microcontroller to your PC and open the Arduino IDE and go to Tools/Serial Monitor . Restart the microcontroller, and the IP address will be displayed upon connecting to the network. Done :-)","title":"Quickstart instructions"},{"location":"EN/quickstart.html#why-do-i-only-see-so-few-parameters","text":"Once you access BSB-LAN for the first time, you will see that only very few parameters are shown on the device\u2019s web interface. This is because each model of the Siemens controller built into your heating system supports a different set of parameters. Previously, I provided a list of parameters collected from all different kinds of heating systems, but it turned out that this list was ambiguous or even contained errors that we couldn\u2019t fix reliably. This list is still available in release version 2.2.x of BSB-LAN and can be copied from there if needed. However, it is not advisable to do so because the said ambiguities and errors pose too great a risk of misconfiguring the heating system. Instead, it is recommended to click on the \" Device-specific parameter list \" button in BSB-LAN's menu and send the generated list to Frederik (bsb(\u00e4t)code-it.de). From this file, a parameter list can be generated that fits exactly the controller of your heating system. Unfortunately, this process cannot be automated yet, but at least it has to be done just once. These raw data do not contain any settings or other kinds of personal data, just the parameter structure of the heating system. It\u2019s in my own interest to create and return these parameter lists without any delay, but I ask for your understanding if it takes a bit longer due to work or family matters.","title":"Why do I only see so few parameters?"},{"location":"EN/supported_heating_systems.html","text":"Supported heating systems BSB-LAN supports heating systems that communicate using either the BSB (Boiler System Bus), the LPB (Local Process Bus) or the PPS (Punkt-zu-Punkt-Schnittstelle). These controllers are usually manufactured by Siemens, older controllers might still bear the company name \"Landis & Stafea\" or \"Landis & Gyr\". Here are a few examples from heating controllers and the connectors that are used to connect to BSB-LAN. Some connectors have three pins, some have two pins. If there are three pins, make sure you choose the correct two (CL+ and CL-) as the third von (G+) is to provide background lighting for the room unit. It won't harm BSB-LAN, but it might be misleading because BSB-LAN's LED will be on even though it's not connected to the right pin. Controller Image Remarks LMS14 LMS15 + = Left - = Center LMS14 LMS15 LMU64 LPB connection via OCI420 RVA63 RVP54 RVS61 RVS21 RVS21 with AVS55 AVS55 extension module, sitting on top of RVS21. + = rightmost pin - = second pin from right RVS41 RVS51 RVS43","title":"Supported Heating Systems"},{"location":"EN/supported_heating_systems.html#supported-heating-systems","text":"BSB-LAN supports heating systems that communicate using either the BSB (Boiler System Bus), the LPB (Local Process Bus) or the PPS (Punkt-zu-Punkt-Schnittstelle). These controllers are usually manufactured by Siemens, older controllers might still bear the company name \"Landis & Stafea\" or \"Landis & Gyr\". Here are a few examples from heating controllers and the connectors that are used to connect to BSB-LAN. Some connectors have three pins, some have two pins. If there are three pins, make sure you choose the correct two (CL+ and CL-) as the third von (G+) is to provide background lighting for the room unit. It won't harm BSB-LAN, but it might be misleading because BSB-LAN's LED will be on even though it's not connected to the right pin. Controller Image Remarks LMS14 LMS15 + = Left - = Center LMS14 LMS15 LMU64 LPB connection via OCI420 RVA63 RVP54 RVS61 RVS21 RVS21 with AVS55 AVS55 extension module, sitting on top of RVS21. + = rightmost pin - = second pin from right RVS41 RVS51 RVS43","title":"Supported heating systems"},{"location":"EN/troubleshooting.html","text":"Troubleshooting BSB-LAN tries to make accessing your heating system as easy as possible, but there are always things that can go wrong. If you still have a problem after reading this document as well as the FAQ , please open up a bug report on the project's GitHub page and make sure that you provide us with the necessary log files, especially from the Serial Monitor ( Tools/Serial Monitor in the Arduino IDE). Make sure you copy the messages right from the moment your microcontroller boots until the moment you encounter the problem. Please do not send screenshots, only plain text files. In addition to the help from the developers, there are also a number of users who have written tutorials in several languages that might me helpful for you to fix your problems: Home Assistant GitHub user @ryann72 wrote detailed instructions for BSB-LAN and HomeAssistant/Mosquitto . It is also available in French . YouTuber @StoneTime has created two videos (in German) where he shows the installation of BSB-LAN as well as setting it up in Home Assistant . Dankesch\u00f6n! YouTuber @ArminasTV has created two videos (in French) where he shows the installation of BSB-LAN as well as how to set it up with Home Assistant and MQTT . Merci beacoup!","title":"Troubleshooting"},{"location":"EN/troubleshooting.html#troubleshooting","text":"BSB-LAN tries to make accessing your heating system as easy as possible, but there are always things that can go wrong. If you still have a problem after reading this document as well as the FAQ , please open up a bug report on the project's GitHub page and make sure that you provide us with the necessary log files, especially from the Serial Monitor ( Tools/Serial Monitor in the Arduino IDE). Make sure you copy the messages right from the moment your microcontroller boots until the moment you encounter the problem. Please do not send screenshots, only plain text files. In addition to the help from the developers, there are also a number of users who have written tutorials in several languages that might me helpful for you to fix your problems:","title":"Troubleshooting"},{"location":"EN/troubleshooting.html#home-assistant","text":"GitHub user @ryann72 wrote detailed instructions for BSB-LAN and HomeAssistant/Mosquitto . It is also available in French . YouTuber @StoneTime has created two videos (in German) where he shows the installation of BSB-LAN as well as setting it up in Home Assistant . Dankesch\u00f6n! YouTuber @ArminasTV has created two videos (in French) where he shows the installation of BSB-LAN as well as how to set it up with Home Assistant and MQTT . Merci beacoup!","title":"Home Assistant"},{"location":"EN/using.html","text":"Using BSB-LAN Controlling the heating system via the web-interface As a first step \u2013 or if you just want to turn your heating system on or off \u2013 you can simply open the BSB-LAN web-interface and go to the Settings menu. This will display a list of categories from your heating controller. You can click on each category and will get a list of corresponding parameters. If you see a Set button, it means the parameter can be changed, and clicking on the button will send the new value to the heater. If there is no Set button, the parameter is read-only and there is no way to change the parameter. Using BSB-LAN's URL commands Most of BSB-LAN's functionality can be controlled using URL commands. These are useful or even necessary when connecting BSB-LAN to a home automation system , but also provide access to functions not directly accessible via the web-interface. URL commands are called right after BSB-LAN's hostname and an (optional) passkey. So to get a list of categories, one would have to open the URL http://bsb-lan.local/K (or http://bsb-lan.local/1234/K if the passkey 1234 is in use). Querying and setting parameters URL command Functionality /<x> Query setting of parameter <x> /<x>!<addr> Query setting of parameter <x> from controller at destination address <addr> /<x>/<y>/<z> Query settings of parameters <x> , <y> and <z> . Parameters can include ! to address different controllers. /<x>-<y> Query settings of parameters <x> to <y> /<x>!<addr>-<y> Query settings of parameters to from controller at destination address <addr> /K List all parameter categories from controller at default destination address /K!<addr> List all parameter categories from controller at destination address <addr> /K<x> Query all parameters of category <x> from controller at default destination address /K<x>!<addr> Query all parameters of category <x> from controller at destination address <addr> /S<x>=<y> Set parameter <x> from controller at default destination address to value . To set a parameter to --- (off/deactivated), just send an empty value: S<x>= /S<x>!<addy>=<y> Set parameter <x> from controller at destination address <addr> to value <y> . /I<x>=<y> Send value y as INF telegram to parameter <x> . So far only required with setting room temperature (parameters 10000 ff.). Configuration URL command Functionality /C Configuration /CO Dump BSB-LAN's configuration /P<x>,<y>,<z> Temporarily set bus type to <x> , own address to <y> and target address to <z> . Empty values leave the address as it is already set. /V<x> Enable ( 1 ) or disable ( 0 ) verbose output mode. Should remain enabled unless specifically instructed. Logging URL command Functionality /DG Graphical display (graph plot) of an active log file /D or /DD Dumps log file datalog.txt from storage. Contains the logged parameters and values when logging to SD card is active. /D<n> Dumps the most recent <n> calender days of the log file /D<a>,<b> Dumps data from log file between <a> and <b> . <a> and <b> have to be set in the format yyyy-mm-dd (e.g. /D2024-04-01,2024-04-30 ) /D0 Reset both log files datalog.txt and journal.txt and create new headers. Should be executed before first logging. /DK<n> Purges data older than <n> days from the log file /LN Forces logging irrespective of current interval and restarts the configured interval at this point of time /L=<x>,<y>,<z> Set logging interval to <x> seconds and (optionally) reset logging parameters to <y> , <z> etc. until reboot /L=0,0 Deactivate logging to storage until reboot /LB=<x> Log only broadcast telegrams ( 1 ) or all telegrams ( 0 ). Setting active until reboot. /LU=<x> Log only unknown bus telegrams ( 1 ) or all telegrams ( 0 ). Setting active until reboot. /A=0 Disable 24h average calculation until reboot /A=<x>,<y>,<z> Change 24h average value calculation to parameters <x> , <y> and <z> until reboot /B0 Reset stats for accumulated burner-runtime and -cycles /DD0 Remove log file datalog.txt only /DJ Dumps log file journal.txt from storage /DJ0 Remove log file journal.txt only /LD Disable logging of telegrams to journal.txt until reboot /LE Enable logging of telegrams to journal.txt Parameter information URL command Functionality /E<x> Displays parameter options of parameter <x> . Only available for option-type parameters such as data types VT_ENUM , VT_CUSTOM_ENUM , VT_BITS and VT_CUSTOM_BITS . /R<x> Query default setting of parameter <x> GPIO control URL command Functionality /G<x> Displays the actual state of GPIO pin <x> /G<x>=<y> Set GPIO pin <x> to HIGH ( <y> = 1 ) or LOW ( <y> = 0 ) /G<x>,I Query GPIO pin <x> while setting the pin to INPUT . Might be (un)necessary depending on your microcontroller. JSON interface URL command Functionality /JQ=<x>,<y>,<z> Query parameters <x> , <y> and <z> and return a JSON structure /JQ Query parameters based on a received JSON structure via HTTP POST /JK=<x> Query all parameters of category <x> /JS Set parameters based on a received JSON structure via HTTP /JR<x> Query default value of parameter <x> and return a JSON structure /JK=ALL Dump ranges for all available categories as JSON structure /JC=<x>,<y>,<z> Dump possible values for parameters <x> , <y> and <z> for option-type parameters. Same JSON structure as /JK=<x> . /JB Backup of all writeable parameters in a JSON structure that can be used to write back using /JS /JL Creates a JSON structure of BSB-LAN's configuration settings` /JW Writes configuration settings based on a JSON structure created by /JL /JI Dump runtime information of BSB-LAN as JSON structure` /JV Return the version of BSB-LAN's JSON-API as a JSON structure Misceallaneous URL command Functionality /M<x> Send ( 1 ) or revoke ( 0 ) MQTT auto-discovery messages for all parameters from controller at default destination address. /N Reset and reboot microcontroller (takes approx. 15 seconds) /NE Erase EEPROM and reboot the microcontroller. All configuration settings will subsequently be read from configuration file until set and saved again in the web-interface to be written to EEPROM. /QD Dump parameter structure from heating system /W With a preceding /W the URL commands C , S and Q return data without HTML header and footer (e.g.: /WC or /WS<x>=<y!z> ). Using the graphical plot functionality If logged data on storage (either SD card or internal flash) is available, the Display log file becomes clickable. By default, it will display the logged data in the browser. To access the logged data itself (in the file datalog.txt ), use the /D URL command mentioned above. By default, \"Display log file\" displays the log data of the most recent n calendar days ( n=DEFAULT_DAYS_TO_PLOT , configurable in BSB_LAN_config.h ). Subsequently, controls on the web page can be used to select a different range, depending on the data contained in the log file Mouseover, click and mouse wheel actions within the graphical display provide various control options: - Better legibility for value numbers with plot lines close to each other (mouseover on plot) - Users can interactively highlight plot lines for improved overview (mouseover on legend entries) - Users can interactively disable plot lines for improved overview and vertical scaling (click on legend entries) - Zoom (mousewheel/pinch on plot) and pan capability (drag zoomed-in plot)","title":"Using BSB-LAN"},{"location":"EN/using.html#using-bsb-lan","text":"","title":"Using BSB-LAN"},{"location":"EN/using.html#controlling-the-heating-system-via-the-web-interface","text":"As a first step \u2013 or if you just want to turn your heating system on or off \u2013 you can simply open the BSB-LAN web-interface and go to the Settings menu. This will display a list of categories from your heating controller. You can click on each category and will get a list of corresponding parameters. If you see a Set button, it means the parameter can be changed, and clicking on the button will send the new value to the heater. If there is no Set button, the parameter is read-only and there is no way to change the parameter.","title":"Controlling the heating system via the web-interface"},{"location":"EN/using.html#using-bsb-lans-url-commands","text":"Most of BSB-LAN's functionality can be controlled using URL commands. These are useful or even necessary when connecting BSB-LAN to a home automation system , but also provide access to functions not directly accessible via the web-interface. URL commands are called right after BSB-LAN's hostname and an (optional) passkey. So to get a list of categories, one would have to open the URL http://bsb-lan.local/K (or http://bsb-lan.local/1234/K if the passkey 1234 is in use).","title":"Using BSB-LAN's URL commands"},{"location":"EN/using.html#querying-and-setting-parameters","text":"URL command Functionality /<x> Query setting of parameter <x> /<x>!<addr> Query setting of parameter <x> from controller at destination address <addr> /<x>/<y>/<z> Query settings of parameters <x> , <y> and <z> . Parameters can include ! to address different controllers. /<x>-<y> Query settings of parameters <x> to <y> /<x>!<addr>-<y> Query settings of parameters to from controller at destination address <addr> /K List all parameter categories from controller at default destination address /K!<addr> List all parameter categories from controller at destination address <addr> /K<x> Query all parameters of category <x> from controller at default destination address /K<x>!<addr> Query all parameters of category <x> from controller at destination address <addr> /S<x>=<y> Set parameter <x> from controller at default destination address to value . To set a parameter to --- (off/deactivated), just send an empty value: S<x>= /S<x>!<addy>=<y> Set parameter <x> from controller at destination address <addr> to value <y> . /I<x>=<y> Send value y as INF telegram to parameter <x> . So far only required with setting room temperature (parameters 10000 ff.).","title":"Querying and setting parameters"},{"location":"EN/using.html#configuration","text":"URL command Functionality /C Configuration /CO Dump BSB-LAN's configuration /P<x>,<y>,<z> Temporarily set bus type to <x> , own address to <y> and target address to <z> . Empty values leave the address as it is already set. /V<x> Enable ( 1 ) or disable ( 0 ) verbose output mode. Should remain enabled unless specifically instructed.","title":"Configuration"},{"location":"EN/using.html#logging","text":"URL command Functionality /DG Graphical display (graph plot) of an active log file /D or /DD Dumps log file datalog.txt from storage. Contains the logged parameters and values when logging to SD card is active. /D<n> Dumps the most recent <n> calender days of the log file /D<a>,<b> Dumps data from log file between <a> and <b> . <a> and <b> have to be set in the format yyyy-mm-dd (e.g. /D2024-04-01,2024-04-30 ) /D0 Reset both log files datalog.txt and journal.txt and create new headers. Should be executed before first logging. /DK<n> Purges data older than <n> days from the log file /LN Forces logging irrespective of current interval and restarts the configured interval at this point of time /L=<x>,<y>,<z> Set logging interval to <x> seconds and (optionally) reset logging parameters to <y> , <z> etc. until reboot /L=0,0 Deactivate logging to storage until reboot /LB=<x> Log only broadcast telegrams ( 1 ) or all telegrams ( 0 ). Setting active until reboot. /LU=<x> Log only unknown bus telegrams ( 1 ) or all telegrams ( 0 ). Setting active until reboot. /A=0 Disable 24h average calculation until reboot /A=<x>,<y>,<z> Change 24h average value calculation to parameters <x> , <y> and <z> until reboot /B0 Reset stats for accumulated burner-runtime and -cycles /DD0 Remove log file datalog.txt only /DJ Dumps log file journal.txt from storage /DJ0 Remove log file journal.txt only /LD Disable logging of telegrams to journal.txt until reboot /LE Enable logging of telegrams to journal.txt","title":"Logging"},{"location":"EN/using.html#parameter-information","text":"URL command Functionality /E<x> Displays parameter options of parameter <x> . Only available for option-type parameters such as data types VT_ENUM , VT_CUSTOM_ENUM , VT_BITS and VT_CUSTOM_BITS . /R<x> Query default setting of parameter <x>","title":"Parameter information"},{"location":"EN/using.html#gpio-control","text":"URL command Functionality /G<x> Displays the actual state of GPIO pin <x> /G<x>=<y> Set GPIO pin <x> to HIGH ( <y> = 1 ) or LOW ( <y> = 0 ) /G<x>,I Query GPIO pin <x> while setting the pin to INPUT . Might be (un)necessary depending on your microcontroller.","title":"GPIO control"},{"location":"EN/using.html#json-interface","text":"URL command Functionality /JQ=<x>,<y>,<z> Query parameters <x> , <y> and <z> and return a JSON structure /JQ Query parameters based on a received JSON structure via HTTP POST /JK=<x> Query all parameters of category <x> /JS Set parameters based on a received JSON structure via HTTP /JR<x> Query default value of parameter <x> and return a JSON structure /JK=ALL Dump ranges for all available categories as JSON structure /JC=<x>,<y>,<z> Dump possible values for parameters <x> , <y> and <z> for option-type parameters. Same JSON structure as /JK=<x> . /JB Backup of all writeable parameters in a JSON structure that can be used to write back using /JS /JL Creates a JSON structure of BSB-LAN's configuration settings` /JW Writes configuration settings based on a JSON structure created by /JL /JI Dump runtime information of BSB-LAN as JSON structure` /JV Return the version of BSB-LAN's JSON-API as a JSON structure","title":"JSON interface"},{"location":"EN/using.html#misceallaneous","text":"URL command Functionality /M<x> Send ( 1 ) or revoke ( 0 ) MQTT auto-discovery messages for all parameters from controller at default destination address. /N Reset and reboot microcontroller (takes approx. 15 seconds) /NE Erase EEPROM and reboot the microcontroller. All configuration settings will subsequently be read from configuration file until set and saved again in the web-interface to be written to EEPROM. /QD Dump parameter structure from heating system /W With a preceding /W the URL commands C , S and Q return data without HTML header and footer (e.g.: /WC or /WS<x>=<y!z> ).","title":"Misceallaneous"},{"location":"EN/using.html#using-the-graphical-plot-functionality","text":"If logged data on storage (either SD card or internal flash) is available, the Display log file becomes clickable. By default, it will display the logged data in the browser. To access the logged data itself (in the file datalog.txt ), use the /D URL command mentioned above. By default, \"Display log file\" displays the log data of the most recent n calendar days ( n=DEFAULT_DAYS_TO_PLOT , configurable in BSB_LAN_config.h ). Subsequently, controls on the web page can be used to select a different range, depending on the data contained in the log file Mouseover, click and mouse wheel actions within the graphical display provide various control options: - Better legibility for value numbers with plot lines close to each other (mouseover on plot) - Users can interactively highlight plot lines for improved overview (mouseover on legend entries) - Users can interactively disable plot lines for improved overview and vertical scaling (click on legend entries) - Zoom (mousewheel/pinch on plot) and pan capability (drag zoomed-in plot)","title":"Using the graphical plot functionality"}]}